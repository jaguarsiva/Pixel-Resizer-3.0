/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/helpers.ts":
/*!********************************!*\
  !*** ./src/scripts/helpers.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nString.prototype.toPrettyText = function () {\r\n    return this\r\n        .split('\\n')\r\n        .join('')\r\n        .trim();\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9oZWxwZXJzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFPQSxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRztJQUM1QixPQUFPLElBQUk7U0FDTixLQUFLLENBQUMsSUFBSSxDQUFDO1NBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUNSLElBQUksRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waXhlbC1yZXNpemVyLTMuMC8uL3NyYy9zY3JpcHRzL2hlbHBlcnMudHM/NDQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFN0cmluZyB7XHJcbiAgICAgICAgdG9QcmV0dHlUZXh0KCk6IHN0cmluZztcclxuICAgIH1cclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS50b1ByZXR0eVRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIC5zcGxpdCgnXFxuJylcclxuICAgICAgICAuam9pbignJylcclxuICAgICAgICAudHJpbSgpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge30iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/helpers.ts\n");

/***/ }),

/***/ "./src/scripts/index.ts":
/*!******************************!*\
  !*** ./src/scripts/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./src/scripts/helpers.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n// Form Handlings\r\nconst form = document.querySelector('form');\r\nconst inputText = document.querySelector('#inputText');\r\nconst outputText = document.querySelector('#outputText');\r\nconst copyNote = document.querySelector('#copyNote');\r\nconst inputElements = document.querySelectorAll('input[type=\"number\"]');\r\nconst alertBox = document.querySelector('#alert');\r\nconst alertText = document.querySelector('#alertText');\r\nconst alertClose = document.querySelector('#alertClose');\r\n//\r\nconst propertiesToResize = [\r\n    \"background-size\",\r\n    \"background-position\",\r\n    \"background-position-x\",\r\n    \"background-position-y\",\r\n    \"height\",\r\n    \"width\",\r\n    \"min-width\",\r\n    \"max-width\",\r\n    \"min-height\",\r\n    \"max-height\"\r\n];\r\n// Only one of the factors can have value at a time...\r\nfunction resetInputValue(element) {\r\n    element.addEventListener('focus', event => {\r\n        inputElements.forEach(element => {\r\n            if (element !== event.target)\r\n                element.value = '';\r\n        });\r\n    });\r\n}\r\nfunction handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (!inputText.value)\r\n        return openAlert('CSS Rule(s) can\\'t be empty!.');\r\n    // Check whether one input element has a value\r\n    const factor = getFactor();\r\n    if (!factor)\r\n        return openAlert('Need one factor!.');\r\n    const rules = getRules(inputText.value);\r\n    const declarations = getAllDeclarations(rules);\r\n    const multiplier = getMultiplier(factor, declarations);\r\n    const result = getOutput(inputText.value, multiplier);\r\n    setOutput(result);\r\n}\r\nfunction getFactor() {\r\n    const element = Array.from(inputElements).find(element => element.value);\r\n    return element ? { type: element.id, value: element.valueAsNumber } : null;\r\n}\r\nfunction getMultiplier({ type, value }, declarations) {\r\n    if (type === 'multiplier')\r\n        return value;\r\n    const actualValue = getValueByProperty(declarations, type);\r\n    return parseFloat((value / parseFloat(actualValue)).toFixed(4));\r\n}\r\nfunction getRules(rulesString) {\r\n    let rule;\r\n    let index = rulesString.indexOf('{');\r\n    const rulesArray = [];\r\n    if (index === -1) {\r\n        rule = {\r\n            selector: 'default',\r\n            declarations: getDeclarationsByRule(rulesString.toPrettyText())\r\n        };\r\n        rulesArray.push(rule);\r\n    }\r\n    else {\r\n        let start = 0, end;\r\n        while (index < rulesString.length) {\r\n            end = rulesString.indexOf('}', index);\r\n            rule = {\r\n                selector: rulesString.substring(start, index).toPrettyText(),\r\n                declarations: getDeclarationsByRule(rulesString.substring(index + 1, end).toPrettyText())\r\n            };\r\n            start = end + 1;\r\n            rulesArray.push(rule);\r\n            index = rulesString.indexOf('{', end);\r\n            if (index === -1)\r\n                break;\r\n        }\r\n    }\r\n    return rulesArray;\r\n}\r\nfunction getDeclarationsByRule(declarationsString) {\r\n    const declarationsArray = declarationsString\r\n        .split(';')\r\n        .slice(0, -1)\r\n        .map(str => {\r\n        const [property, value] = str.split(':');\r\n        return {\r\n            property: property.trim(),\r\n            value: value.trim()\r\n        };\r\n    });\r\n    return declarationsArray;\r\n}\r\nfunction getAllDeclarations(rules) {\r\n    return rules\r\n        .reduce((result, { declarations }) => result.concat(...declarations), []);\r\n}\r\nfunction getValueByProperty(declarations, property) {\r\n    const declaration = declarations.find(declaration => declaration.property === property);\r\n    return declaration ? declaration.value : '';\r\n}\r\nfunction replaceValueInDeclaration(declarations, multiplier) {\r\n    return declarations\r\n        .split(';')\r\n        .map(declaration => {\r\n        const [property, value] = declaration.split(':');\r\n        if (propertiesToResize.includes(property.trim())) {\r\n            let start = 0, end, valueAsNumber, newValue;\r\n            value.trim().split(' ').forEach(subvalue => {\r\n                valueAsNumber = parseFloat(subvalue);\r\n                newValue = Math.round(((valueAsNumber * multiplier) + Number.EPSILON) * 1000) / 1000;\r\n                start = declaration.indexOf(subvalue, start);\r\n                end = start + subvalue.length;\r\n                declaration = declaration.substring(0, start)\r\n                    .concat(declaration\r\n                    .substring(start, end)\r\n                    .replace(String(valueAsNumber), String(newValue)))\r\n                    .concat(declaration.substring(end));\r\n            });\r\n        }\r\n        return declaration;\r\n    })\r\n        .join(';');\r\n}\r\nfunction getOutput(text, multiplier) {\r\n    let index = text.indexOf('{');\r\n    if (index === -1)\r\n        return replaceValueInDeclaration(text, multiplier);\r\n    let end, actualDeclaration, newDeclaration;\r\n    while (index < text.length) {\r\n        end = text.indexOf('}', index);\r\n        actualDeclaration = text.substring(index + 1, end);\r\n        newDeclaration = replaceValueInDeclaration(actualDeclaration, multiplier);\r\n        text = text.replace(actualDeclaration, newDeclaration);\r\n        index = text.indexOf('{', end);\r\n        if (index === -1)\r\n            break;\r\n    }\r\n    return text;\r\n}\r\nfunction setOutput(result) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        outputText.value = result;\r\n        if (navigator.clipboard) {\r\n            yield navigator.clipboard.writeText(result);\r\n            openAlert('Output copied to clipboard!.');\r\n        }\r\n        outputText.classList.add(\"slide-down\");\r\n        setTimeout(() => {\r\n            outputText.classList.remove(\"slide-down\");\r\n        }, 1000);\r\n    });\r\n}\r\n// Alert\r\nlet alertTimer = null;\r\nfunction openAlert(message) {\r\n    alertBox.classList.add('is-shown');\r\n    alertText.innerText = message;\r\n    alertTimer = setTimeout(closeAlert, 3000);\r\n    return false;\r\n}\r\nfunction closeAlert() {\r\n    alertBox.classList.remove('is-shown');\r\n    alertBox.classList.add('is-removing');\r\n    setTimeout(() => {\r\n        alertBox.classList.remove('is-removing');\r\n    }, 1000);\r\n    alertText.innerText = '';\r\n    if (alertTimer)\r\n        clearTimeout(alertTimer);\r\n}\r\n// DOM Content Loaded Event\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    inputElements.forEach(resetInputValue);\r\n    form.addEventListener('submit', handleSubmit);\r\n    alertClose.addEventListener('click', closeAlert);\r\n    navigator.clipboard || copyNote.classList.add('is-hidden');\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scripts/index.ts");
/******/ 	
/******/ })()
;