{"version":3,"file":"app.js","mappings":"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","sources":["webpack://pixel-resizer-3.0/./src/scripts/helpers.ts","webpack://pixel-resizer-3.0/./src/scripts/index.ts"],"sourcesContent":["\r\ndeclare global {\r\n    interface String {\r\n        toPrettyText(): string;\r\n    }\r\n}\r\n\r\nString.prototype.toPrettyText = function () {\r\n    return this\r\n        .split('\\n')\r\n        .join('')\r\n        .trim();\r\n};\r\n\r\nexport default {}","\r\nimport './helpers';\r\nimport {\r\n    factorType,\r\n    factorOrNull,\r\n    ruleType,\r\n    declarationType,\r\n    timeoutOrNull\r\n} from './types';\r\n\r\n// Form Handlings\r\nconst form = document.querySelector('form')!;\r\nconst inputText = document.querySelector('#inputText') as HTMLTextAreaElement;\r\nconst outputText = document.querySelector('#outputText') as HTMLTextAreaElement;\r\nconst copyNote = document.querySelector('#copyNote') as HTMLDivElement;\r\nconst inputElements = document.querySelectorAll<HTMLInputElement>('input[type=\"number\"]');\r\n\r\nconst alertBox = document.querySelector('#alert') as HTMLDivElement;\r\nconst alertText = document.querySelector('#alertText') as HTMLParagraphElement;\r\nconst alertClose = document.querySelector('#alertClose') as HTMLButtonElement;\r\n\r\n//\r\nconst propertiesToResize = [\r\n    \"background-size\",\r\n    \"background-position\",\r\n    \"background-position-x\",\r\n    \"background-position-y\",\r\n    \"height\",\r\n    \"width\",\r\n    \"min-width\",\r\n    \"max-width\",\r\n    \"min-height\",\r\n    \"max-height\"\r\n];\r\n\r\n// Only one of the factors can have value at a time...\r\nfunction resetInputValue( element: HTMLInputElement ) {\r\n    element.addEventListener('focus', event => {\r\n        inputElements.forEach( element => {\r\n            if( element !== event.target ) element.value = '';\r\n        });\r\n    });\r\n}\r\n\r\nfunction handleSubmit( event: Event ) {\r\n\r\n    event.preventDefault();\r\n\r\n    if( !inputText.value ) return openAlert( 'CSS Rule(s) can\\'t be empty!.' );\r\n\r\n    // Check whether one input element has a value\r\n    const factor = getFactor();\r\n    if( !factor ) return openAlert( 'Need one factor!.' );\r\n\r\n    const rules = getRules( inputText.value );\r\n    const declarations = getAllDeclarations( rules );\r\n    const multiplier = getMultiplier( factor, declarations );\r\n    const result = getOutput( inputText.value, multiplier );\r\n    setOutput( result );\r\n}\r\n\r\nfunction getFactor(): factorOrNull  {\r\n\r\n    const element = Array.from( inputElements ).find( element => element.value );\r\n    return element ? { type: element.id, value: element.valueAsNumber } : null;\r\n}\r\n\r\nfunction getMultiplier( { type, value }: factorType, declarations: declarationType[] ) {\r\n\r\n    if( type === 'multiplier' ) return value;\r\n    const actualValue = getValueByProperty( declarations, type );\r\n    return parseFloat( ( value / parseFloat( actualValue ) ).toFixed(4) );\r\n}\r\n\r\nfunction getRules( rulesString: string ) {\r\n\r\n    let rule: ruleType;\r\n    let index = rulesString.indexOf( '{' );\r\n    const rulesArray: ruleType[] = [];\r\n    if( index === -1 ) {\r\n        rule = {\r\n            selector: 'default',\r\n            declarations: getDeclarationsByRule( rulesString.toPrettyText() )\r\n        };\r\n        rulesArray.push( rule );\r\n    }\r\n    else {\r\n        let start = 0, end: number;\r\n        while( index < rulesString.length ) {\r\n            end = rulesString.indexOf( '}', index );\r\n            rule = {\r\n                selector: rulesString.substring( start, index ).toPrettyText(),\r\n                declarations: getDeclarationsByRule( rulesString.substring(index + 1, end).toPrettyText() )\r\n            };\r\n            start = end + 1;\r\n            rulesArray.push( rule );\r\n            index = rulesString.indexOf( '{', end );\r\n            if( index === -1 ) break;\r\n        }\r\n    }\r\n\r\n    return rulesArray;\r\n}\r\n\r\nfunction getDeclarationsByRule( declarationsString: string ) {\r\n\r\n    const declarationsArray: declarationType[] = declarationsString\r\n        .split(';')\r\n        .slice(0, -1)\r\n        .map( str =>  {\r\n            const [ property, value ] = str.split(':');\r\n            return {\r\n                property: property.trim(),\r\n                value: value.trim()\r\n            };\r\n        });\r\n    return declarationsArray;\r\n}\r\n\r\nfunction getAllDeclarations( rules: ruleType[] ) {\r\n\r\n    return rules\r\n        .reduce(\r\n            ( result: declarationType[], { declarations } ) => result.concat( ...declarations ),\r\n            []\r\n        );\r\n}\r\n\r\nfunction getValueByProperty( declarations: declarationType[], property: string ) {\r\n\r\n    const declaration = declarations.find( declaration => declaration.property === property );\r\n    return declaration ? declaration.value : '';\r\n}\r\n\r\nfunction replaceValueInDeclaration( declarations: string, multiplier: number ) {\r\n\r\n    return declarations\r\n        .split(';')\r\n        .map( declaration => {\r\n            const [ property, value ] = declaration.split(':');\r\n            if( propertiesToResize.includes( property.trim() ) ) {\r\n                let start = 0, end: number, valueAsNumber: number, newValue: number;\r\n                value.trim().split(' ').forEach( subvalue => {\r\n                    valueAsNumber = parseFloat( subvalue );\r\n                    newValue = Math.round( ( (valueAsNumber * multiplier) + Number.EPSILON ) * 1000 ) / 1000;\r\n                    start = declaration.indexOf( subvalue, start );\r\n                    end = start + subvalue.length;\r\n                    declaration = declaration.substring( 0, start )\r\n                        .concat( declaration\r\n                                .substring( start, end )\r\n                                .replace( String( valueAsNumber ), String( newValue ) )\r\n                        )\r\n                        .concat( declaration.substring( end ) );\r\n                });\r\n            }\r\n            return declaration;\r\n        })\r\n        .join(';');\r\n}\r\n\r\nfunction getOutput( text: string, multiplier: number ) {\r\n\r\n    let index = text.indexOf( '{' );\r\n    if( index === -1 ) return replaceValueInDeclaration( text, multiplier );\r\n\r\n    let end: number, actualDeclaration: string, newDeclaration: string;\r\n    while( index < text.length ) {\r\n        end = text.indexOf( '}', index );\r\n        actualDeclaration = text.substring( index + 1, end );\r\n        newDeclaration = replaceValueInDeclaration( actualDeclaration, multiplier );\r\n        text = text.replace( actualDeclaration, newDeclaration );\r\n        index = text.indexOf( '{', end );\r\n        if( index === -1 ) break;\r\n    }\r\n    return text;\r\n}\r\n\r\nasync function setOutput( result: string ) {\r\n    outputText.value = result;\r\n    if (navigator.clipboard) {\r\n        await navigator.clipboard.writeText( result );\r\n        openAlert( 'Output copied to clipboard!.' );\r\n    }\r\n    outputText.classList.add(\"slide-down\");\r\n    setTimeout( () => {\r\n        outputText.classList.remove(\"slide-down\");\r\n    }, 1000);\r\n}\r\n\r\n// Alert\r\nlet alertTimer: timeoutOrNull = null;\r\nfunction openAlert( message: string ) {\r\n    alertBox.classList.add('is-shown');\r\n    alertText.innerText = message;\r\n    alertTimer = setTimeout( closeAlert , 3000);\r\n    return false;\r\n}\r\n\r\nfunction closeAlert() {\r\n    alertBox.classList.remove('is-shown');\r\n    alertBox.classList.add('is-removing');\r\n    setTimeout(() => {\r\n        alertBox.classList.remove('is-removing');\r\n    }, 1000);\r\n    alertText.innerText = '';\r\n    if( alertTimer ) clearTimeout( alertTimer );\r\n}\r\n\r\n// DOM Content Loaded Event\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    inputElements.forEach( resetInputValue );\r\n    form.addEventListener( 'submit', handleSubmit );\r\n    alertClose.addEventListener('click', closeAlert );\r\n\r\n    navigator.clipboard || copyNote.classList.add('is-hidden');\r\n});"],"names":["String","prototype","toPrettyText","this","split","join","trim","document","querySelector","inputText","outputText","copyNote","inputElements","querySelectorAll","alertBox","alertText","alertClose","propertiesToResize","resetInputValue","element","addEventListener","event","forEach","target","value","handleSubmit","preventDefault","openAlert","factor","Array","from","find","type","id","valueAsNumber","getFactor","multiplier","declarations","actualValue","property","declaration","getValueByProperty","parseFloat","toFixed","getMultiplier","rulesString","rule","index","indexOf","rulesArray","selector","getDeclarationsByRule","push","end","start","length","substring","getRules","reduce","result","concat","navigator","clipboard","writeText","classList","add","setTimeout","remove","setOutput","text","actualDeclaration","newDeclaration","replaceValueInDeclaration","replace","getOutput","declarationsString","slice","map","str","includes","newValue","subvalue","Math","round","Number","EPSILON","alertTimer","message","innerText","closeAlert","clearTimeout"],"sourceRoot":""}